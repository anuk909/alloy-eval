{"task_id": "graph/undirected", "prompt": "Create an Alloy predicate 'undirected' that checks if a graph is undirected, meaning edges are symmetric (if there's an edge from node A to node B, there must also be an edge from B to A).", "signatures": "sig Node { adj : set Node }", "predicate_signature": "pred undirected {\n", "canonical_solution": "\tadj = ~adj\n}", "check": "check undirected {\n    undirected iff (~adj = adj)\n} for 4"}
{"task_id": "graph/oriented", "prompt": "Create an Alloy predicate 'oriented' that checks if a graph is oriented, meaning it contains no symmetric edges (if there's an edge from node A to node B, there cannot be an edge from B to A).", "signatures": "sig Node { adj : set Node }", "predicate_signature": "pred oriented {\n", "canonical_solution": "\tno adj & ~adj\n}", "check": "check oriented {\n    oriented iff (no adj & ~adj)\n} for 4"}
{"task_id": "graph/acyclic", "prompt": "Create an Alloy predicate 'acyclic' that checks if a directed graph contains no cycles.", "signatures": "sig Node { adj : set Node }", "predicate_signature": "pred acyclic {\n", "canonical_solution": "\tno iden & ^adj\n}", "check": "check acyclic {\n    acyclic iff (no iden & ^adj)\n} for 4"}
{"task_id": "graph/complete", "prompt": "Create an Alloy predicate 'complete' that checks if a directed graph is complete, meaning every node has edges to all other nodes.", "signatures": "sig Node { adj : set Node }", "predicate_signature": "pred complete {\n", "canonical_solution": "\tall n: Node | Node - n = n.adj\n}", "check": "check complete {\n    complete iff (all n: Node | Node - n = n.adj)\n} for 4"}
{"task_id": "graph/noLoops", "prompt": "Create an Alloy predicate 'noLoops' that checks if a graph contains no loops (nodes have no transitions to themselves).", "signatures": "sig Node { adj : set Node }", "predicate_signature": "pred noLoops {\n", "canonical_solution": "\tno iden & adj\n}", "check": "check noLoops {\n    noLoops iff (no iden & adj)\n} for 4"}
{"task_id": "graph/weaklyConnected", "prompt": "Create an Alloy predicate 'weaklyConnected' that checks if a directed graph is weakly connected, meaning it is possible to reach every node from every node ignoring edge direction.", "signatures": "sig Node { adj : set Node }", "predicate_signature": "pred weaklyConnected {\n", "canonical_solution": "\tNode->Node in *(adj + ~adj)\n}", "check": "check weaklyConnected {\n    weaklyConnected iff (Node->Node in *(adj + ~adj))\n} for 4"}
{"task_id": "graph/stronglyConnected", "prompt": "Create an Alloy predicate 'stronglyConnected' that checks if a directed graph is strongly connected, meaning it is possible to reach every node from every node considering edge direction.", "signatures": "sig Node { adj : set Node }", "predicate_signature": "pred stronglyConnected {\n", "canonical_solution": "\tNode->Node in *adj\n}", "check": "check stronglyConnected {\n    stronglyConnected iff (Node->Node in *adj)\n} for 4"}
{"task_id": "graph/transitive", "prompt": "Create an Alloy predicate 'transitive' that checks if a directed graph is transitive, meaning if two nodes are connected through a third node, they also are connected directly.", "signatures": "sig Node { adj : set Node }", "predicate_signature": "pred transitive {\n", "canonical_solution": "\t^adj = adj\n}", "check": "check transitive {\n    transitive iff (^adj = adj)\n} for 4"}
