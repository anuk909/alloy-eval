{"task_id": "graph/undirected", "prompt": "The graph is undirected, ie, edges are symmetric.\nhttp://mathworld.wolfram.com/UndirectedGraph.html", "signatures": "sig Node {\n\tadj : set Node\n}", "predicate_signature": "pred undirected {\n", "canonical_solution": "\tadj = ~adj\n}", "check": "check undirected {\n    undirected iff (~adj = adj)\n} for 4"}
{"task_id": "graph/oriented", "prompt": "The graph is oriented, ie, contains no symmetric edges.\nhttp://mathworld.wolfram.com/OrientedGraph.html", "signatures": "sig Node {\n\tadj : set Node\n}", "predicate_signature": "pred oriented {\n", "canonical_solution": "\tno adj & ~adj\n}", "check": "check oriented {\n    oriented iff (no adj & ~adj)\n} for 4"}
{"task_id": "graph/acyclic", "prompt": "The graph is acyclic, ie, contains no directed cycles.\nhttp://mathworld.wolfram.com/AcyclicDigraph.html", "signatures": "sig Node {\n\tadj : set Node\n}", "predicate_signature": "pred acyclic {\n", "canonical_solution": "\tno iden & ^adj\n}", "check": "check acyclic {\n    acyclic iff (no iden & ^adj)\n} for 4"}
{"task_id": "graph/complete", "prompt": "The graph is complete, ie, every node is connected to every other node.\nhttp://mathworld.wolfram.com/CompleteDigraph.html", "signatures": "sig Node {\n\tadj : set Node\n}", "predicate_signature": "pred complete {\n", "canonical_solution": "\tall n: Node | Node - n = n.adj\n}", "check": "check complete {\n    complete iff (all n: Node | Node - n = n.adj)\n} for 4"}
{"task_id": "graph/noLoops", "prompt": "The graph contains no loops, ie, nodes have no transitions to themselves.\nhttp://mathworld.wolfram.com/GraphLoop.html", "signatures": "sig Node {\n\tadj : set Node\n}", "predicate_signature": "pred noLoops {\n", "canonical_solution": "\tno iden & adj\n}", "check": "check noLoops {\n    noLoops iff (no iden & adj)\n} for 4"}
{"task_id": "graph/weaklyConnected", "prompt": "The graph is weakly connected, ie, it is possible to reach every node from every node ignoring edge direction.\nhttp://mathworld.wolfram.com/WeaklyConnectedDigraph.html", "signatures": "sig Node {\n\tadj : set Node\n}", "predicate_signature": "pred weaklyConnected {\n", "canonical_solution": "\tNode->Node in *(adj + ~adj)\n}", "check": "check weaklyConnected {\n    weaklyConnected iff (Node->Node in *(adj + ~adj))\n} for 4"}
{"task_id": "graph/stronglyConnected", "prompt": "The graph is strongly connected, ie, it is possible to reach every node from every node considering edge direction.\nhttp://mathworld.wolfram.com/StronglyConnectedDigraph.html", "signatures": "sig Node {\n\tadj : set Node\n}", "predicate_signature": "pred stronglyConnected {\n", "canonical_solution": "\tNode->Node in *adj\n}", "check": "check stronglyConnected {\n    stronglyConnected iff (Node->Node in *adj)\n} for 4"}
{"task_id": "graph/transitive", "prompt": "The graph is transitive, ie, if two nodes are connected through a third node, they also are connected directly.\nhttp://mathworld.wolfram.com/TransitiveDigraph.html", "signatures": "sig Node {\n\tadj : set Node\n}", "predicate_signature": "pred transitive {\n", "canonical_solution": "\t^adj = adj\n}", "check": "check transitive {\n    transitive iff (^adj = adj)\n} for 4"}