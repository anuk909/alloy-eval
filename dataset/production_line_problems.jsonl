{"task_id": "inv1", "prompt": "when specifying each property you can assume all the previous ones to be true.", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv1 {\n", "canonical_solution": "\tHuman + Robot = Worker\n}", "check": "check inv1 {\n    inv1 iff (Human + Robot = Worker)\n} for 4"}
{"task_id": "inv2", "prompt": "Every workstation has workers and every worker works in one workstation", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv2 {\n", "canonical_solution": "\tall w: Workstation | #w.workers > 0 and all wk: Worker | #(wk.~workers) = 1\n}", "check": "check inv2 {\n    inv2 iff (all w: Workstation | #w.workers > 0 and all wk: Worker | #(wk.~workers) = 1)\n} for 4"}
{"task_id": "inv3", "prompt": "Every component is assembled in one workstation", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv3 {\n", "canonical_solution": "\tall c: Component | one c.workstation\n}", "check": "check inv3 {\n    inv3 iff (all c: Component | one c.workstation)\n} for 4"}
{"task_id": "inv4", "prompt": "Components must have parts and materials have no parts", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv4 {\n", "canonical_solution": "\tall c: Component | #c.parts > 0 and all m: Material | #m.parts = 0\n}", "check": "check inv4 {\n    inv4 iff (all c: Component | #c.parts > 0 and all m: Material | #m.parts = 0)\n} for 4"}
{"task_id": "inv5", "prompt": "Humans and robots cannot work together", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv5 {\n", "canonical_solution": "\tall w: Workstation | w.workers in Human or w.workers in Robot\n}", "check": "check inv5 {\n    inv5 iff (all w: Workstation | w.workers in Human or w.workers in Robot)\n} for 4"}
{"task_id": "inv6", "prompt": "Components cannot be their own parts", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv6 {\n", "canonical_solution": "\tall c: Component | c not in c.^parts\n}", "check": "check inv6 {\n    inv6 iff (all c: Component | c not in c.^parts)\n} for 4"}
{"task_id": "inv7", "prompt": "Components built of dangerous parts are also dangerous", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv7 {\n", "canonical_solution": "\tComponent & parts.Dangerous in Dangerous\n}", "check": "check inv7 {\n    inv7 iff (Component & parts.Dangerous in Dangerous)\n} for 4"}
{"task_id": "inv8", "prompt": "Dangerous components cannot be assembled by humans", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv8 {\n", "canonical_solution": "\tDangerous.workstation.workers in Robot\n}", "check": "check inv8 {\n    inv8 iff (Dangerous.workstation.workers in Robot)\n} for 4"}
{"task_id": "inv9", "prompt": "The workstations form a single line between begin and end", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv9 {\n", "canonical_solution": "\tno succ.begin and no end.succ and all w: Workstation - end | one w.succ and all w: Workstation - begin | one succ.w and Workstation = begin.*succ\n}", "check": "check inv9 {\n    inv9 iff (no succ.begin and no end.succ and all w: Workstation - end | one w.succ and all w: Workstation - begin | one succ.w and Workstation = begin.*succ)\n} for 4"}
{"task_id": "inv10", "prompt": "The parts of a component must be assembled before it in the production line", "signatures": "sig Workstation {\n\tworkers : set Worker,\n\tsucc : set Workstation\n}\nsig begin, end in Workstation {}\nsig Worker {}\nsig Human, Robot extends Worker {}\nsig Product {\n\tparts : set Product\t\n}\nsig Material extends Product {}\nsig Component extends Product {\n\tworkstation : set Workstation\n}\nsig Dangerous in Product {}", "predicate_signature": "pred inv10 {\n", "canonical_solution": "\tall c: Component | all p: c.parts & Component | some (c.workstation & p.workstation.^succ)\n}", "check": "check inv10 {\n    inv10 iff (all c: Component | all p: c.parts & Component | some (c.workstation & p.workstation.^succ))\n} for 4"}